"""
Pet Sitter AI Library
Do not edit this file! Instead, look at pet_watch.py.
"""

import tsapp
import pygame
import random
import ts_pet
pygame.init()

_window = tsapp.GraphicsWindow(1018, 573)
c = pygame.time.Clock()
available_pets = ["CatIdle.png","DogIdle.png"]
pet_scales = {"CatIdle.png" : 0.4,
              "DogIdle.png": 0.6}
recommended_answers = { "hungry" : "feed",
                        "bored" : "play",
                        "tired" : "nap"}
choice_number = 0
recommendation = ""
pet_type = "cat"
pet_options = 2
pets = []
picked_pet = False
points = 0
pet = False

def _add_pets():
    global pet
    for i in range(pet_options):
        random_pet = random.choice(available_pets)
        available_pets.remove(random_pet)
        new_option = tsapp.Sprite(random_pet, 0, 0)
        new_option.center_x = i * 300 + 400
        new_option.center_y = 320
        new_option.scale = pet_scales[random_pet]
        pets.append(new_option)
        _window.add_object(new_option)

def show_pets():
    global _window
    global pet
    global picked_pet
    global _title
    global _status
    global pet_type
    _window.framerate = 30
    _title = tsapp.TextLabel("Peralta-Regular.ttf", 30, 200, 90, 600, "Pick a pet!", tsapp.BLACK)
    _title.align = "center"
    _status = tsapp.TextLabel("Peralta-Regular.ttf", 30, 200, 440, 600, "", tsapp.BLACK)
    _status.align = "center"
    living_room = tsapp.Sprite("LivingRoom.jpg", 0, 0)
    _window.add_object(living_room)
    _window.add_object(_title)
    _window.add_object(_status)
    _add_pets()

    while _window.is_running:
        for p in pets:
            mouse_x, mouse_y = tsapp.get_mouse_position()
            if tsapp.was_mouse_pressed() and p.is_colliding_point(mouse_x, mouse_y):
                picked_pet = True
                pet_image = p.image
                if pet_image == "DogIdle.png":
                    pet_type = "dog"
                pet = ts_pet.Pet(pet_image, "", pet_scales[pet_image])
                _window.add_object(pet.get_sprite())
        if picked_pet:
            for p in pets:
                p.visible = False
            name = input("What would you name your " + pet_type + "? ")
            _title.text = "Your pet: " + name
            pet.set_name(name)
            _window.finish_frame()
            break
        c.tick(30)
        _window.finish_frame()

def get_user_pet():
    return pet_type

def show_problem():
    global choice_number
    global recommendation
    pet.set_image(pet.get_image(choice_number))
    pet.get_sprite().scale = pet.get_image_scale(choice_number)
    c.tick(30)
    _window.finish_frame()
    recommendation = recommended_answers[pet.get_mood(choice_number)]


def get_user_solution():
    print()
    print("What would you like to do with " + pet.get_name() + "?")
    print("Feed them (feed), play with them (play), or give them a nap (nap)? ")
    choice = input("Type your answer: ")
    return choice.lower()

def get_ai_guess():
    return recommendation


def _update_image(sleep):
    update = False
    while _window.is_running:
        if update:
            pygame.time.wait(500)
            break
        else:
            if sleep:
                pet.set_image(pet.get_image(4))
                pet.get_sprite().scale = pet.get_image_scale(4)
            else:
                pet.set_image(pet.get_image(3))
                pet.get_sprite().scale = pet.get_image_scale(3)
            update = True
        _window.finish_frame()


def _change_problem():
    global choice_number
    choice_number = (choice_number + 1) % 3


def play():
    if pet.get_mood(choice_number) == "bored":
        _update_image(False)
    _change_problem()
    print()



def feed():
    if pet.get_mood(choice_number) == "hungry":
        _update_image(False)
    _change_problem()
    print()


def nap():
    if pet.get_mood(choice_number) == "tired":
        _update_image(True)
    _change_problem()
    print()

def end():
        while _window.is_running:
            _window.finish_frame()